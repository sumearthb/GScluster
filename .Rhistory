}
Genelist = c()
for(i in 1:nrow(tab)){
Genelist[i] = paste(sort(unname(sapply(strsplit(tab[i,8],'; ')[[1]], function(i){strsplit(i,'\\(')[[1]][1]}))),collapse = ' ')
}
gsFile = data.frame(cbind(GS, Genelist, Qvalues), stringsAsFactors = FALSE)
score = data.frame(score, stringsAsFactors = FALSE)
return(list(gsFile = gsFile, score = score))
}
res = BuildGSFile(filename )
max(2,0)
max
?max
max(2,3)
max(c(2,3))
BuildGSFile = function(filename){
tab = read.delim(filename, header = T, stringsAsFactors = FALSE)
GS = tab[,1]
Qvalues = as.numeric(tab[,7])
Genes = sort(unique(strsplit(paste(tab[,8],collapse = '; '),'; ')[[1]]))
Genes = Genes[-1] # remove " "
score = matrix(0,length(Genes),2)
for(i in 1:length(Genes)){
temp = strsplit(Genes[i],'\\(')[[1]]
score[i,1] = temp[1]
v = as.numeric(strsplit(temp[2],'\\)')[[1]][1])
score[i,2] = 2^(-max(c(v,0)))
}
Genelist = c()
for(i in 1:nrow(tab)){
Genelist[i] = paste(sort(unname(sapply(strsplit(tab[i,8],'; ')[[1]], function(i){strsplit(i,'\\(')[[1]][1]}))),collapse = ' ')
}
gsFile = data.frame(cbind(GS, Genelist, Qvalues), stringsAsFactors = FALSE)
score = data.frame(score, stringsAsFactors = FALSE)
return(list(gsFile = gsFile, score = score))
}
res = BuildGSFile(filename )
plot(res$score)
summary(res$score)
summary(res$score[,2])
plot(res$score[,2])
BuildGSFile = function(filename){
tab = read.delim(filename, header = T, stringsAsFactors = FALSE)
GS = tab[,1]
Qvalues = as.numeric(tab[,7])
Genes = sort(unique(strsplit(paste(tab[,8],collapse = '; '),'; ')[[1]]))
Genes = Genes[-1] # remove " "
score = matrix(0,length(Genes),2)
for(i in 1:length(Genes)){
temp = strsplit(Genes[i],'\\(')[[1]]
score[i,1] = temp[1]
v = as.numeric(strsplit(temp[2],'\\)')[[1]][1])
score[i,2] = 2^(-max(c(v,0)))
}
Genelist = c()
for(i in 1:nrow(tab)){
Genelist[i] = paste(sort(unname(sapply(strsplit(tab[i,8],'; ')[[1]], function(i){strsplit(i,'\\(')[[1]][1]}))),collapse = ' ')
}
gsFile = data.frame(cbind(GS, Genelist, Qvalues), stringsAsFactors = FALSE)
gsFile[,3] = as.numeric(gsFile[,3])
score = data.frame(score, stringsAsFactors = FALSE)
score[,2] = as.numeric(score[,2])
return(list(gsFile = gsFile, score = score))
}
res = BuildGSFile(filename )
rm(list = ls())
genecard = function(gene){
paste0('http://www.genecards.org/cgi-bin/carddisp.pl?gene=',gene)
}
genecard('A1BG')
rm(genecard
)
?createCytoscapeJsNetwork
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
createCytoscapeJsNetwork
library(mypkg)
mypkg::GScluster()
createCytoscapeJsNetwork
library(mypkg)
mypkg::GScluster()
library(mypkg)
createCytoscapeJsNetwork
library(mypkg)
mypkg::GScluster()
id <- c("Jerry", "Elaine", "Kramer", "George")
name <- id
nodeData <- data.frame(id, name, stringsAsFactors=FALSE)
source <- c("Jerry", "Jerry", "Jerry", "Elaine", "Elaine", "Kramer", "Kramer", "Kramer", "George")
target <- c("Elaine", "Kramer", "George", "Jerry", "Kramer", "Jerry", "Elaine", "George", "Jerry")
edgeData <- data.frame(source, target, stringsAsFactors=FALSE)
network <- createCytoscapeJsNetwork(nodeData, edgeData)
network$nodes
length(network$nodes)
network$nodes[[1]]
network$nodes[[1]]$data$href
library(mypkg)
rm(list = ls())
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
id <- c("Jerry", "Elaine", "Kramer", "George")
name <- id
nodeData <- data.frame(id, name, stringsAsFactors=FALSE)
source <- c("Jerry", "Jerry", "Jerry", "Elaine", "Elaine", "Kramer", "Kramer", "Kramer", "George")
target <- c("Elaine", "Kramer", "George", "Jerry", "Kramer", "Jerry", "Elaine", "George", "Jerry")
edgeData <- data.frame(source, target, stringsAsFactors=FALSE)
network <- createCytoscapeJsNetwork(nodeData, edgeData)
network$nodes[[1]]$data$href='HELLO'
network$nodes[[1]]
renderRcytoscapejs
shinyRenderWidget(,rcytoscapejsOutput)
shinyRenderWidget(,rcytoscapejsOutput, quoted = TRUE)
shinyRenderWidget(network,rcytoscapejsOutput, quoted = TRUE)
shinyRenderWidget(network,rcytoscapejsOutput, parent.frame(),quoted = TRUE)
mypkg::GScluster()
a()
gene
gene = "ACSL1"
GetGenecardURL = function(gene){
paste0('http://www.genecards.org/cgi-bin/carddisp.pl?gene=',gene)
}
a(GetGenecardURL(gene))
a(href = GetGenecardURL(gene))
rm(list = ls())
library(mypkg)
mypkg::GScluster()
GetGenecardURL = function(gene){
a(href = paste0('http://www.genecards.org/cgi-bin/carddisp.pl?gene=',gene))
}
GetGenecardURL("ACSL1")
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
GetGenecardURL = function(gene){
a(href = paste0('http://www.genecards.org/cgi-bin/carddisp.pl?gene=',gene))
}
sapply(c("A","B","C"),GetGenecardURL)
sapply("c("A","B","C")"A"",GetGenecardURL)
sapply("A",GetGenecardURL)
GetGenecardURL = function(gene){
a(href = paste0('http://www.genecards.org/cgi-bin/carddisp.pl?gene=',gene))
}
sapply("A",GetGenecardURL)
GetGenecardURL("A")
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
load("inst/mypkg/V.RData")
read.delim('inst/mypkg/sample_geneset.txt', header = T, stringsAsFactors = FALSE)
tab = read.delim('inst/mypkg/sample_geneset.txt', header = T, stringsAsFactors = FALSE)
dim(tab)
tab[,3]
tab[,2]
GsN = tab[,1]
rownames(v) = colnames(v) = GsN
which(GsN=='PID_BCR_PATHWAY')
which(GsN=='PID_BCR_5PATHWAY')
which(GsN=='BIOCARTA_AKT_PATHWAY')
v[192,95]
v[95,192]
which(GsN=='BIOCARTA_RAS_PATHWAY')
v[192,193]
v[192,123]
mypkg::GScluster()
which(GsN=='BIOCARTA_CD40_PATHWAY')
v[192,41]
which(GsN=='PID_NFKAPPAB_ATYPICAL_PATHWAY')
v[192,11]
v[192,111]
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
View(v)
v[0]
v[1]
v[1,]
unname(v[1,])
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
devtools::load_all(".")
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
250/0.25
214/0.25
111/0.25
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
250/0.25
255-49
206*4
255-144
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
255-33
255-142
113*4
255-61
194*4
255-232
23*4
255-21
234*4
255-72
183*4
92*4+232
92/4+232
936/4+21
732/4+72
library(mypkg)
mypkg::GScluster()
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
mypkg::GScluster()
a = sample(10)
a
rank(a)
a = sample(10:20)
a
rank(a)
which(rank(a)<=3)
a[which(rank(a)<=3)]
library(mypkg)
mypkg::GScluster()
matrix(0,0,2)
rbind(matrix(0,0,2),c(1,2))
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
matrix(sample(10:20),2)
matrix(sample(10:20),10,2)
sort(matrix(sample(10:20),10,2))
a = matrix(sample(10:20),10,2)
a
a[order(a[,1]),]
a[order(a[,2]),]
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
?order
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
?actionButton()
shinyjs::disable
?shinyjs::disable
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
mypkg::GScluster()
GScluster()
255-298
255-198
932*0.25+22
255-222
800*0.25+22
255-158
97/4
97*4
388*0.25+158
744/4+48
230*4
234*4
215*4
180*4
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
library(mypkg)
mypkg::GScluster()
library(mypkg)
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
setwd("~")
gsfile = read.delim('colongsa.txt', header = T, stringsAsFactors = F)
score = read.delim('colongs.txt', stringsAsFactors = FALSE)
head(score)
score = read.delim('colongs.txt', stringsAsFactors = FALSE, header = F)
head(score)
head(gsfile)
mypkg::GScluster(gsfile,score)
library(mypkg)
mypkg::GScluster(gsfile,score)
mypkg::GScluster(gsfile,score)
mypkg::GScluster()
library(mypkg)
library(mypkg)
mypkg::GScluster()
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
mypkg::GScluster()
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
?menuItem
library(mypkg)
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
mypkg::GScluster()
library(mypkg)
library(mypkg)
mypkg::GScluster()
mypkg::GScluster()
gc()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
mypkg::GScluster()
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
install_github("rstudio/DT")
library(devtools)
install_github("rstudio/DT")
install_github("rstudio/DT")
install.packages(c("backports", "callr", "commonmark", "httr", "jsonlite", "knitr", "markdown", "pillar", "processx", "ps", "slam", "tm"))
install_github("rstudio/DT")
library(devtools)
install_github("rstudio/DT")
mypkg::GScluster()
?datatable(selection = )
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
mypkg::GScluster()
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
library(mypkg)
mypkg::GScluster()
